[gcode_macro _SAVE_Z_OFFSET]
gcode:
  {% set z_offsets = printer.save_variables.variables["z_offsets"] | default(dict()) %}
  {% set def_z_offset = printer.configfile.config.probe.z_offset | default(0) | float %}
  {% set def_z_delta = printer.gcode_move.homing_origin.z | default(0) | float %}
  {% set z_offset = def_z_offset - def_z_delta %} 
  {% set bed_type = printer.save_variables.variables["bed_type"] | default("undefined") | string %}
  {% set dummy=z_offsets.__setitem__(bed_type, z_offset) %}
  SAVE_VARIABLE VARIABLE="z_offsets" VALUE="{z_offsets}" QUIET=1

[gcode_macro SET_GCODE_OFFSET]
description: Set a virtual offset to g-code positions
rename_existing: SET_GCODE_OFFSET_ORIG
gcode:
  SET_GCODE_OFFSET_ORIG { rawparams }
  _SAVE_Z_OFFSET

#[gcode_macro Z_OFFSET_APPLY_PROBE]
#description: Apply Z-offset adjustments and save it persistently
#rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
#gcode:
#  Z_OFFSET_APPLY_PROBE_ORIG { rawparams }
#  _SAVE_Z_OFFSET

[gcode_macro _LOAD_Z_OFFSET]
gcode:
  {% set z_offsets = printer.save_variables.variables["z_offsets"] | default(dict()) %}
  {% set bed_type = printer.save_variables.variables["bed_type"] | default("undefined") | string %}
  {% if bed_type in z_offsets %}
    {% set def_z_offset = printer.configfile.config.probe.z_offset | default(0) | float %}
    {% set delta = def_z_offset - z_offsets[bed_type] %}
    SET_GCODE_OFFSET_ORIG Z={delta}
  {% else %}
    SET_GCODE_OFFSET_ORIG Z=0
  {% endif %}