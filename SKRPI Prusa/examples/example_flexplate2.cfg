[gcode_macro SET_BED_SURFACE]
description: stores and optionally activates the gcode offset for a given bed surface
gcode:
    {% set svv = printer.save_variables.variables %}

    {% set BED_SURFACE = params.NAME | default(svv.selected_bed_surface) %}
    {% set Z_OFFSET    = params.OFFSET | default(printer.gcode_move.homing_origin.z) | float %}
    {% set MOVE        = params.MOVE | default(0) | int %}

    {% set OLD_Z_OFFSET = svv['bed_surface_offsets.' + BED_SURFACE] | default("unknown") %}

    SAVE_VARIABLE VARIABLE=selected_bed_surface VALUE="'{ BED_SURFACE }'"
    SAVE_VARIABLE VARIABLE=bed_surface_offsets.{ BED_SURFACE } VALUE={ '%.3f' % Z_OFFSET }

    RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r -> %05.3f' % (BED_SURFACE, OLD_Z_OFFSET, Z_OFFSET) }"

    SET_GCODE_OFFSET Z={ '%.3f' % Z_OFFSET } MOVE={ MOVE }


PRINT_START gcode
gcode:
{% set svv = printer.save_variables.variables %}

…

;; apply Z offset for configured bed surface
RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r' % (svv.selected_bed_surface, svv['bed_surface_offsets.' + svv.selected_bed_surface]) }"
SET_GCODE_OFFSET MOVE=1 Z={ '%.3f' % (svv["bed_surface_offsets." + svv.selected_bed_surface] | float) }

…

MENUS
;; choose a bed surface from a pre-configured list
[menu __main __setup __bed_surface]
type: input
name: Bed: { printer.save_variables.variables.bed_surfaces[menu.input | int] }
input: { printer.save_variables.variables.bed_surfaces.index(printer.save_variables.variables.selected_bed_surface) | float }
input_min: 0.0
input_max: { ((printer.save_variables.variables.bed_surfaces | length) - 1) | float }
input_step: 1.0
gcode:
    SAVE_VARIABLE VARIABLE=selected_bed_surface VALUE="'{ printer.save_variables.variables.bed_surfaces[menu.input | int] }'"

;; tunes the Z offset from the setup menu, saves the offset
;; can be performed while not actively printing
[menu __main __setup __offsetz]
type: input
name: Offset Z:{ '%05.3f' % menu.input }
input: { printer.save_variables.variables["bed_surface_offsets." + printer.save_variables.variables.selected_bed_surface] | float }
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r' % (printer.save_variables.variables.selected_bed_surface, menu.input) }"
    SET_GCODE_OFFSET Z={ '%.3f' % menu.input } MOVE={ 1 if printer.toolhead.homed_axes == 'XYZ' else 0 }
    SAVE_VARIABLE VARIABLE=bed_surface_offsets.{ printer.save_variables.variables.selected_bed_surface } VALUE={ '%.3f' % menu.input }

;; tunes the Z offset from the tune menu, saves the offset
[menu __main __tune __offsetz]
type: input
name: Offset Z:{ '%05.3f' % menu.input }
input: { printer.gcode_move.homing_origin.z }
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r' % (printer.save_variables.variables.selected_bed_surface, menu.input) }"
    SET_GCODE_OFFSET Z={ '%.3f' % menu.input } MOVE=1
    SAVE_VARIABLE VARIABLE=bed_surface_offsets.{ printer.save_variables.variables.selected_bed_surface } VALUE={ '%.3f' % menu.input }

[Variables]
bed_surfaces = ['smooth', 'textured']

selected_bed_surface = 'smooth'

bed_surface_offsets.smooth = -0.185
bed_surface_offsets.textured = -0.17