######################################################################
# Directory "Setup"
######################################################################

#    + Setup
#       + Save config
#       + Restart
#          + Restart host
#          + Restart FW
#       + Shutdown Host
#       + PID tuning
#          + Tune Hotend PID
#          + Tune Hotbed PID
#       + Calibration
#          + Bed probe
#          + Pressure Advance
#              + Set Filamenttype
#                + PLA
#                + PETG
#                + ASA
#              + PA Calibration
#              + PA Normal
#          + Resonances (TBD)
#              + Test X-Axis
#              + Test Y-Axis
#              + Auto Calibrate X
#              + Auto Calibrate Y
#       + Dump parameters
#       + Set Acceleration
#       + Set Decceleration

### Menu Setup ###
#[menu __mymain __setup]
#type: list
#enable: {not printer.idle_timeout.state == "Printing"}
#name: Setup

[menu __mymain __setup __save_config]
type: command
name: Save config
gcode: SAVE_CONFIG

[menu __mymain __setup __restart]
type: list
name: Restart

[menu __mymain __setup __restart __host_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart host
gcode: RESTART

[menu __mymain __setup __restart __firmware_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart FW
gcode: FIRMWARE_RESTART

[menu __mymain __setup __shutdown ]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Shutdown Host
gcode: {action_call_remote_method("shutdown_machine")}


### Menu PID tuning ###
[menu __mymain __setup __tuning]
type: list
name: PID tuning

[menu __mymain __setup __tuning __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Tune Hotend PID
gcode: PID_CALIBRATE HEATER=extruder TARGET=215 WRITE_FILE=1

[menu __mymain __setup __tuning __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Tune Hotbed PID
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1


### Menu Calibration ###
[menu __mymain __setup __calib]
type: list
name: Calibration

[menu __mymain __setup __calib __bedprobe]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Bed probe
gcode: PROBE


### Menu Pressure Advance ###
[menu __mymain __setup __calib __pa]
type: list
enable: true ;{not printer.idle_timeout.state == "Printing"}
name: Pressure Advance

[menu __mymain __setup __calib __pa __type]
type: list
name: Set Filamenttype

[menu __mymain __setup __calib __pa __type __pla]
type: command
name: PLA
gcode: SET_FILAMENTTYPE TYPE=PLA

[menu __mymain __setup __calib __pa __type __petg]
type: command
name: PETG
gcode: SET_FILAMENTTYPE TYPE=PETG

[menu __mymain __setup __calib __pa __test]
type: command
name: PA Calibration
gcode: PA_TEST

[menu __mymain __setup __calib __pa __panormal]
type: command
name: PA Normal
gcode: PA_NORMAL


### Menu Resonances ###

[menu __mymain __setup __dump]
type: command
name: Dump parameters
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

[menu __mymain __setup __accel]
type: input
name: Accell: {'%4d' % (menu.input)}
input: {printer['toolhead'].max_accel}
input_min: 500
input_max: 4000
input_step: 50
gcode: SET_VELOCITY_LIMIT ACCEL={'%d' % (menu.input)}

[menu __mymain __setup __deccel]
type: input
name: Deccell: {'%4d' % (menu.input)}
input: {printer['toolhead'].max_accel_to_decel}
input_min: 500
input_max: 4000
input_step: 50
gcode: SET_VELOCITY_LIMIT ACCEL_TO_DECEL={'%d' % (menu.input)}