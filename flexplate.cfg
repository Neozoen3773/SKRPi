########################################
# Changing z_offset for different Plates
########################################

[gcode_macro ADD_PLATE]
description: Add a new flexplate to the array
# usage. ADD_PLATE NAME=example
gcode:
    {% set name = params.NAME|default('New')|lower %}
    SET_GCODE_OFFSET Z=0
    SAVE_VARIABLE VARIABLE=current_plate VALUE="'{name}'"
    SAVE_VARIABLE VARIABLE={'%s' % ("offset_" + name|string)} VALUE=0
    M117 Added Plate "{'%s' % ("offset_" + name|string)}"
    
    {% set prefix = printer.save_variables.variables %}
    {% set array = namespace(output = '') %}
    {% set plates = prefix.plate_array %}
    {% set elem_count = plates|length %}
    # klipper can not store arrays elements so we need to do a string manipulation 
    {% for index in range(elem_count) %}
      {% set element = "'%s', " % (plates[index]) %}
      {% set array.output = array.output + element %}
    {% endfor %}
    # add new plate
    {% set name = "'%s'" % (params.NAME|default('New')|lower) %}
    {% set array.output = array.output + name %}
    # add array boarders
    {% set array.output = "[%s]" % (array.output) %}
    SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"

[gcode_macro SET_PLATE_OFFSET]
description: Set the current G-Code Offset as Offset for the current Plate
# usage SET_PLATE_OFFSET
gcode:
    {% set prefix = printer.save_variables.variables %}
    {% set offset = printer['gcode_move'].homing_origin.z %}
    {% set current_plate = prefix.current_plate %}
    BED_MESH_CLEAR
    SAVE_VARIABLE VARIABLE={'%s' % ("offset_" + prefix.current_plate|string)} VALUE={offset * -1}
    M118 Offset saved ({'%s' % (prefix["offset_" + prefix.current_plate] | float)} -> {offset * -1})


[gcode_macro CHANGE_PLATE]
description: Change the active plate
# usage: CHANGE_PLATE NAME=example
gcode:
    {% set prefix = printer.save_variables.variables %}
    {% set current_plate = prefix.current_plate %}
    {% set smooth = prefix.offset_smooth %}
    {% set textured = prefix.offset_textured %}
    {% set MOVE = (1 if printer.toolhead.homed_axes == 'XYZ' else 0) %}

    BED_MESH_CLEAR

    {% if 'NAME' in params %}
        {% set name = params.NAME %}
        SET_GCODE_OFFSET Z=0 
        SET_GCODE_OFFSET Z=-{'%.3f' % (prefix["offset_" + name] | float)} MOVE={MOVE}
        SAVE_VARIABLE VARIABLE=current_plate VALUE="'{name}'"
        M117 Offset for {name} plate applied ({'%.3f' % (prefix["offset_" + name] | float)})
    {% else %}
        {% if current_plate == 'smooth' %}
            SET_GCODE_OFFSET Z=0
            SET_GCODE_OFFSET Z=-{prefix.offset_textured} MOVE={MOVE}
            SAVE_VARIABLE VARIABLE=current_plate VALUE="'textured'"
            M117 Offset for textured plate applied ({prefix.offset_textured})

        {% elif current_plate == 'textured' %}
            SET_GCODE_OFFSET Z=0 
            SET_GCODE_OFFSET Z=-{prefix.offset_smooth} MOVE={MOVE}
            SAVE_VARIABLE VARIABLE=current_plate VALUE="'smooth'"
            M117 Offset for smooth plate applied ({prefix.offset_smooth})
        {% endif %}
    {% endif %}

[delayed_gcode _apply_offset]
initial_duration: 1.5
gcode:
    {% set prefix = printer.save_variables.variables %}
    SET_GCODE_OFFSET Z=-{'%.3f' % (prefix["offset_" + prefix.current_plate] | float)}
    M117 Offset for {prefix.current_plate|capitalize} plate applied ({'%.3f' % (prefix["offset_" + prefix.current_plate] | float)})

[gcode_macro _apply_offset]
gcode:
    {% set prefix = printer.save_variables.variables %}
    SET_GCODE_OFFSET Z=-{'%.3f' % (prefix["offset_" + prefix.current_plate] | float)}
    M117 Offset for {prefix.current_plate|capitalize} plate applied ({'%.3f' % (prefix["offset_" + prefix.current_plate] | float)})

